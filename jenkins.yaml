credentials:
  system:
    domainCredentials:
    - credentials:
      - usernamePassword:
          description: "Docker Hub login"
          id: "docker-hub-creds"
          password: "{AQAAABAAAAAwjJ7d...}"
          scope: GLOBAL
          username: "pkonieczny321"
      - usernamePassword:
          description: "Pulling/pushing to GitHub"
          id: "github-creds"
          password: "{AQAAABAAAAEQMhfK...}"
          scope: GLOBAL
          username: "lolek1979"
      - string:
          description: "Argo CD API token for deployments"
          id: "argocd-token"
          scope: GLOBAL
          secret: "{AQAAABAAAAIQkeZX...}"
      - fileSystemServiceAccountCredential:
          id: "4fbfc7fa-f30f-4a61-86b3-ad2515aea2e5"
          scope: GLOBAL

jenkins:
  authorizationStrategy:
    loggedInUsersCanDoAnything:
      allowAnonymousRead: false
  clouds:
    - kubernetes:
        name: "kubernetes"
        namespace: "jenkins"
        serverUrl: "https://kubernetes.default"
        jenkinsUrl: "http://jenkins.jenkins.svc.cluster.local:8080"
        jenkinsTunnel: "jenkins-agent.jenkins.svc.cluster.local:50000"
        templates:
          - name: "jenkins-jenkins-agent"
            label: "jenkins-jenkins-agent"
            serviceAccount: "jenkins"
            containers:
              - name: "jnlp"
                image: "jenkins/inbound-agent:3301.v4363ddcca_4e7-3"
                args: "^${computer.jnlpmac} ^${computer.name}"
                workingDir: "/home/jenkins/agent"
                resourceRequestCpu: "512m"
                resourceRequestMemory: "512Mi"
                resourceLimitCpu: "512m"
                resourceLimitMemory: "512Mi"
          - name: "docker-agent"
            label: "docker-agent"
            serviceAccount: "jenkins"
            containers:
              - name: "jnlp"
                image: "pkonieczny321/jenkins-docker-agent:latest"
                args: "^${computer.jnlpmac} ^${computer.name}"
                workingDir: "/home/jenkins/agent"
                resourceRequestCpu: "512m"
                resourceRequestMemory: "512Mi"
                resourceLimitCpu: "512m"
                resourceLimitMemory: "512Mi"
            volumes:
              - hostPathVolume:
                  mountPath: "/var/run/docker.sock"
                  hostPath: "/var/run/docker.sock"
                  readOnly: false
  crumbIssuer:
    standard:
      excludeClientIPFromCrumb: true
  disableRememberMe: true
  disabledAdministrativeMonitors:
    - "hudson.diagnosis.ReverseProxySetupMonitor"
  labelAtoms:
    - name: "built-in"
    - name: "docker-agent"
    - name: "jenkins-jenkins-agent"
  markupFormatter: "plainText"
  mode: NORMAL
  myViewsTabBar: "standard"
  nodeMonitors:
    - "architecture"
    - "clock"
    - diskSpace:
        freeSpaceThreshold: "1GiB"
        freeSpaceWarningThreshold: "2GiB"
    - "swapSpace"
    - tmpSpace:
        freeSpaceThreshold: "1GiB"
        freeSpaceWarningThreshold: "2GiB"
    - "responseTime"
  numExecutors: 0
  primaryView:
    all:
      name: "all"
  projectNamingStrategy: "standard"
  quietPeriod: 5
  remotingSecurity:
    enabled: true
  scmCheckoutRetryCount: 0
  securityRealm:
    local:
      allowsSignup: false
      enableCaptcha: false
      users:
        - id: "admin"
          name: "Jenkins Admin"
          properties:
            - "apiToken"
            - "consoleUrlProvider"
            - "mailer"
            - "myView"
            - preferredProvider:
                providerId: "default"
            - "timezone"
            - "experimentalFlags"
  slaveAgentPort: 50000
  updateCenter:
    sites:
      - id: "default"
        url: "https://updates.jenkins.io/update-center.json"
  views:
    - all:
        name: "all"
  viewsTabBar: "standard"

jobs:
  - script: >
      pipelineJob('sw-movie-app') {
        parameters {
          stringParam('imageName', 'pkonieczny321/sw-movie-app', 'Docker image name')
          stringParam('imageTag', '1.0.0', 'Docker image tag')
        }
        definition {
          cpsScm {
            scm {
              git {
                remote {
                  url('https://github.com/lolek1979/sw-movie-app.git')
                  credentials('github-creds')
                }
                branches('*/main')
              }
            }
            scriptPath 'Jenkinsfile'
          }
        }
      }

globalCredentialsConfiguration:
  configuration:
    providerFilter: "none"
    typeFilter: "none"
appearance:
  prism:
    theme: PRISM
security:
  apiToken:
    creationOfLegacyTokenEnabled: false
    tokenGenerationOnCreationEnabled: false
    usageStatisticsEnabled: true
  cps:
    hideSandbox: false
  gitHooks:
    allowedOnAgents: false
    allowedOnController: false
  gitHostKeyVerificationConfiguration:
    sshHostKeyVerificationStrategy: "knownHostsFileVerificationStrategy"
  scriptApproval:
    forceSandbox: false
unclassified:
  buildDiscarders:
    configuredBuildDiscarders:
      - "jobBuildDiscarder"
  fingerprints:
    fingerprintCleanupDisabled: false
    storage: "file"
  location:
    adminAddress: "address not configured yet <nobody@nowhere>"
    url: "http://jenkins:8080/"
  mailer:
    charset: "UTF-8"
    useSsl: false
    useTls: false
  pollSCM:
    pollingThreadCount: 10
  scmGit:
    addGitTagAction: false
    allowSecondFetch: false
    createAccountBasedOnEmail: false
    disableGitToolChooser: false
    hideCredentials: false
    showEntireCommitSummaryInChanges: false
    useExistingAccountWithSameEmail: false
tool:
  git:
    installations:
      - home: "git"
        name: "Default"
  mavenGlobalConfig:
    globalSettingsProvider: "standard"
    settingsProvider: "standard"
